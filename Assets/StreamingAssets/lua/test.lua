import 'System'
import 'UnityEngine'
import 'Assembly-CSharp'	-- The user-code assembly generated by Unity.

local Angle = Vector3.up;
local Speed = 10;

local showEnv = false
local envScroll = Vector2.zero

local  x = 1
function Update()

	if x == 100 then x = 0 end
	x = x + 1
    
    local behaviour = this:GetComponent('ExampleBehaviour')
	behaviour:Test(transform.position,Angle,Speed * Time.deltaTime)
	--transform:RotateAround(transform.position,Angle,Speed * Time.deltaTime)
--[[
	if Input.GetKey(KeyCode.W) then
		Speed = Speed + 1
	end

	if Input.GetKey(KeyCode.S) then
		Speed = Speed - 1
	end

	if Input.GetKey(KeyCode.A) then
		Angle.z = Angle.z + 1
	end

	if Input.GetKey(KeyCode.D) then
		Angle.z = Angle.z - 1
	end
]]
end

function OnGUI()
	GUILayout.BeginArea(Rect(10,10,(Screen.width / 2) - 20,Screen.height - 20))

	-- Adding '{ }' to the end of GUI functions satisfies their 'params' argument.
	GUILayout.Label('[W/S] Speed: ' .. Speed,{ }) 
	GUILayout.Label('[A/D] Rot Angle: ' .. Angle:ToString(),{ })

	GUILayout.EndArea()

	GUILayout.BeginArea(Rect((Screen.width / 2) + 10,10,(Screen.width / 2) - 20,Screen.height - 20))

	if GUILayout.Button('Show Enviroment',{ }) then
		showEnv = not showEnv
	end

	if showEnv then
		envScroll = GUILayout.BeginScrollView(envScroll,{ })
		for k, v in pairs(_G) do
			GUILayout.BeginHorizontal({ })

			GUILayout.Label(k,{ })
			GUILayout.FlexibleSpace()
			GUILayout.Label(tostring(v),{ })

			GUILayout.EndHorizontal()
		end
		GUILayout.EndScrollView()
	end	

	GUILayout.EndArea()
end